pipeline {
    agent any

    environment {
        MONGODB_URI = credentials('mongodb-uri')
        TOKEN_KEY = credentials('token-key')
        EMAIL = credentials('email')
        PASSWORD = credentials('password')
        NVD_API_KEY = credentials('nvd-api')
        ACR_NAME = 'flexidevopstrial' 
        ACR_LOGIN_SERVER = 'flexidevopstrial.azurecr.io'  
        ACR_RESOURCE_GROUP = 'flexiResource' 
        FRONTEND_TAG = "${ACR_LOGIN_SERVER}/devops-blog:frontend-latest"
        BACKEND_TAG = "${ACR_LOGIN_SERVER}/devops-blog:backend-latest"
        DOCKER_HUB_IMAGE_FRONTEND = 'mokshada21/devops-blog:frontend-latest'
        DOCKER_HUB_IMAGE_BACKEND = 'mokshada21/devops-blog:backend-latest'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        // Owasp Dependency Check
        // stage('OWASP Dependency Check') {
        //     steps {
        //         echo 'Running OWASP Dependency Check...'
        //         dependencyCheck additionalArguments: "--scan ./ --nvdApiKey=$NVD_API_KEY", odcInstallation: 'DP-check'
        //         dependencyCheckPublisher pattern: 'dependency-check-report.xml'
        //     }
        // }

        //OWASP Dependency Check
        stage('OWASP Dependency Check') {
            steps {
                echo 'Running OWASP Dependency Check...'
                script {
                    dependencyCheck additionalArguments: "--scan ./ --nvdApiKey=${env.NVD_API_KEY}", odcInstallation: 'DP-check'
                }
                dependencyCheckPublisher pattern: 'dependency-check-report.xml'
            }
        }

        // stage('OWASP Dependency Check') {
        //     steps {
        //         echo 'Running OWASP Dependency Check...'
        //         script {
        //             // Set the path to the Dependency Check executable
        //             def dependencyCheckPath = 'C:\\ProgramData\\Jenkins\\.jenkins\\tools\\org.jenkinsci.plugins.DependencyCheck.tools.DependencyCheckInstallation\\DP-check\\dependency-check\\bin\\dependency-check.bat'
                    
        //             // Run Dependency Check with additional arguments
        //             bat "${dependencyCheckPath} --scan ./ --nvdApiKey=${env.NVD_API_KEY} --out ./dependency-check-report.xml"
        //         }
        //         // Use the dependency-check report publisher
        //         dependencyCheckPublisher pattern: 'dependency-check-report.xml'
        //     }
        // }

        stage('Frontend Tests') {
            steps {
                dir('Frontend') {
                    bat 'npm install'
                    // bat 'npx mocha'
                }
            }
        }

        stage('Backend Tests') {
            steps {
                dir('Backend') {
                    bat 'npm install'
                    bat 'set MONGODB_URI=$MONGODB_URI'
                    bat 'set TOKEN_KEY=$TOKEN_KEY'
                    bat 'set EMAIL=$EMAIL'
                    bat 'set PASSWORD=$PASSWORD'
                    // bat 'npm test'
                }
            }
        }

        stage('Build and Push to Docker') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        bat 'docker-compose build'
                        bat 'docker login -u %DOCKER_USERNAME% -p %DOCKER_PASSWORD%'
                        bat 'docker-compose push'
                    }
                }
            }
        }

        stage('Login to ACR') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'azure-client-id', variable: 'AZURE_CLIENT_ID'),
                        string(credentialsId: 'azure-client-secret', variable: 'AZURE_CLIENT_SECRET'),
                        string(credentialsId: 'azure-tenant-id', variable: 'AZURE_TENANT_ID'),
                        string(credentialsId: 'azure-subscription-id', variable: 'AZURE_SUBSCRIPTION_ID')
                    ]) {
                        // Login to Azure CLI with service principal
                        bat 'az login --service-principal -u %AZURE_CLIENT_ID% -p %AZURE_CLIENT_SECRET% --tenant %AZURE_TENANT_ID%'

                        // Login to ACR
                        bat 'az acr login --name %ACR_NAME%'
                    }
                }
            }
        }

        stage('Pull Images from Docker Hub') {
            steps {
                script {
                    // Pull the frontend and backend images from Docker Hub
                    bat 'docker pull %DOCKER_HUB_IMAGE_FRONTEND%'
                    bat 'docker pull %DOCKER_HUB_IMAGE_BACKEND%'
                }
            }
        }

        stage('Tag Images for ACR') {
            steps {
                script {
                    // Tag the Docker Hub images for ACR
                    bat 'docker tag %DOCKER_HUB_IMAGE_FRONTEND% %FRONTEND_TAG%'
                    bat 'docker tag %DOCKER_HUB_IMAGE_BACKEND% %BACKEND_TAG%'
                }
            }
        }

        stage('Push Images to ACR') {
            steps {
                script {
                    // Push the images to ACR
                    bat 'docker push %FRONTEND_TAG%'
                    bat 'docker push %BACKEND_TAG%'
                }
            }
        }
    }
}
